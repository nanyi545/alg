/**

Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.


THE KEY:how to achieve getMin()  once previous smallest element has been poped ??

solution: upon every push(), keep in the stack both the value and the current minimum element !!! 

**/


public class MinStack {
    
    class Helper{
        int val;
        int min;
        Helper(int val,int min){
            this.val=val;
            this.min=min;
        }
    }

    Stack<Helper> stack; 
    
    
    /** initialize your data structure here. */
    public MinStack() {
        stack=new Stack();
    }
    
    public void push(int x) {
        if (stack.size()==0){
            stack.push(new Helper(x,x));
        } else {
            int min=x<stack.peek().min?x:stack.peek().min;
            stack.push(new Helper(x,min));
        }
    }
    
    public void pop() {
        stack.pop();
    }
    
    public int top() {
        return stack.peek().val;
    }
    
    public int getMin() {
        return stack.peek().min;
    }
    
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
