package com.alg.weiwang.algorithoms.stack;

/**
 * Created by Administrator on 2017/6/22.
 */
import com.alg.weiwang.algorithoms.utils.Printer;

import org.junit.Test;

import java.util.Stack;

public class NextLargerElement {


    @Test
    public void test(){
        int[] arr=new int[]{6,3,1,2,4};
        System.out.println(Printer.printIntArr(arr));
        System.out.println(Printer.printIntArr(findNextLargerElement(arr)));
    }

    /**
     *   next larger element :  for each element array --> find its nearest larger( >= ) element on its right
     *
     *    example input  : [6 , 3, 1,2, 4]
     *    example ouput  : [-1, 4, 2,4,-1]
     *
     *    use stack !!!!!!!!!
     *
     *    *6 3 1 2 4
     *                   s: 6       /top
     *     6*3 1 2 4
     *                   s: 6 3     /top
     *     6 3*1 2 4
     *                   s: 6 3 1   /top
     *     6 3 1*2 4
     *                  s: 6 3 2   /top          1->2
     *     6 3 1 2*4
     *                  s: 6 4     /top          2->4  3->4
     *                  s:         /top          4->-1   6->-1
     */

    int[] findNextLargerElement(int[] arr){
        int[] ret=new int[arr.length];
        Stack<ArrayItem> s=new Stack<>();
        s.push(new ArrayItem(0,arr[0]));
        for (int i=1;i<arr.length;i++){
            while( (s.size()>0) &&( arr[i] >= s.peek().value)){
                ArrayItem item=s.pop();
                ret[item.index]=arr[i];
            }
            s.push(new ArrayItem(i,arr[i]));
        }
        while(s.size()>0){
            ArrayItem item=s.pop();
            ret[item.index]=-1;
        }
        return ret;
    }


    /**
     * class to store info in the stack, we want to store both value and index of the array
     */
    private class ArrayItem{
        int index;
        int value;
        public ArrayItem(int index, int value) {
            this.index = index;
            this.value = value;
        }
    }




}
