
/**

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

Input: ( 1 ) + (9 -> 9 -> 9)
Output: 0 -> 0 -> 0 -> 1

**/




public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode c1 = l1;
        ListNode c2 = l2;
        ListNode sentinel = new ListNode(0);              // use of sentinel node to avoid the need to init a ListNode 
        ListNode d = sentinel;
        int sum = 0;
        while (c1 != null || c2 != null) {
            sum /= 10;                          //  use sum to handle number carry 
            if (c1 != null) {
                sum += c1.val;
                c1 = c1.next;
            }
            if (c2 != null) {
                sum += c2.val;
                c2 = c2.next;
            }
            d.next = new ListNode(sum % 10);     //  always display   ( sum % 10 )
            d = d.next;                          // pattern for operation on linked structure in loops 
        }
        if (sum / 10 == 1)                   //  handle the last (posible) number carry 
            d.next = new ListNode(1);
        return sentinel.next;
    }
}
