public class MaxSubArray {


    /**
     *  maximum sub-array problem :
     *
     *  find the sub-array, which has the largest total
     *
     *  solve by divide and conquer  ...
     */
    @Test
    public void test(){
        int[] arr=new int[]{1,1,1,1,1,1,-1,-8,1,1,4,1,-2,3};
        System.out.println(Printer.printIntArr(findMaxSubArry(arr,0,arr.length-1)));
    }


    /**
     *   ret[0]   sum
     *   ret[1]   startIndex
     *   ret[2]   endIndex
     */
    public static int[] findMaxSubArry(int[] arr,int lo,int hi){
        if (lo==hi){
            int[] ret=new int[3];
            ret[0]=arr[lo];
            ret[1]=lo;
            ret[2]=hi;
            return ret;
        }
        int mid=(lo+hi)/2;
        int[] left=findMaxSubArry(arr,lo,mid);  // note mid-1 would need to add the edge case of (lo==hi-1)   ....think about this ...
        int[] right=findMaxSubArry(arr,mid+1,hi);
        int[] middle=findMaxArrayInRange(arr,mid,lo,hi);
        if ((left[0]>=right[0])&&(left[0]>=middle[0])) return left;
        if ((right[0]>=left[0])&&(right[0]>=middle[0])) return right;
        if ((middle[0]>=right[0])&&(middle[0]>=left[0])) return middle;
        return null; // this will not happend
    }


    public static int[] findMaxArrayInRange(int[] arr, int mid, int lo, int hi){
        int leftSum=0;
        int maxLeftSum=0;
        int leftOffset=0;
        for (int temp=1;temp<=(mid-lo);temp++){
            leftSum+=arr[mid-temp];
            if(leftSum>maxLeftSum){
                leftOffset=temp;
                maxLeftSum=leftSum;
            }
        }
        int rightSum=0;
        int maxRightSum=0;
        int rightOffset=0;
        for (int temp=1;temp<=(hi-mid);temp++){
            rightSum+=arr[mid+temp];
            if (rightSum>maxRightSum){
                rightOffset=temp;
                maxRightSum=rightSum;
            }
        }
        int[] ret=new int[3];
        ret[0]=maxLeftSum+arr[mid]+maxRightSum;
        ret[1]=mid-leftOffset;
        ret[2]=mid+rightOffset;
        return ret;
    }






}
