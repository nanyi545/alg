
/**

Given a non-empty array of integers, return the k most frequent elements.

For example,
Given [1,1,1,2,2,3] and k = 2, return [1,2].


key idea: sort a hash map by value ....

**/

public class Solution {
    
    public List<Integer> topKFrequent(int[] nums, int k) {
    
        HashMap<Integer,Integer> counter=new HashMap();
        
        List<Integer> ret=new ArrayList();
        for (int temp:nums){
            if (counter.containsKey(temp)){
                int oldCount=counter.get(temp);
                counter.put(temp,oldCount+1);
            } else {
                counter.put(temp, 1);
            }
        }
        
        Set<Map.Entry<Integer,Integer>> entries=counter.entrySet();
        
        List<Map.Entry<Integer,Integer>> list=new ArrayList(entries);   //  make a list out of a set 
        
        Collections.sort(list, new Comparator<Map.Entry<Integer, Integer>>() {
            @Override
            public int compare(Map.Entry<Integer, Integer> o1, Map.Entry<Integer, Integer> o2) {
                return o2.getValue()-o1.getValue();   
                //  if o1.val-o2.val, natural order small to large
                //   here we want large to small 
            }
        });
        
        for (int i=0;i<k;i++){
            ret.add(list.get(i).getKey());
        }
        
        return ret;
    }
    
}
