

/**

Given an array where elements are sorted in ascending order, convert it to a height balanced BST.

divider and conquer  ...


 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    
    
    
    public TreeNode sortedArrayToBST(int[] nums) {
        
        if(nums==null||nums.length==0) return null;
        int mid=nums.length/2;
        
        TreeNode root=sortedArrayToBST(nums,0,nums.length-1);
        return root;
        
    }
    
    

    public TreeNode sortedArrayToBST(int[] nums,int lo,int hi){
        if (lo==hi){
            TreeNode root=new TreeNode(nums[lo]);
            return root;
        }
        if (lo==hi-1){
            TreeNode root=new TreeNode(nums[hi]);
            root.left=new TreeNode(nums[lo]); 
            return root;
        }
        if (lo==hi-2){
            TreeNode root=new TreeNode(nums[(hi+lo)/2]);
            root.left=new TreeNode(nums[lo]); 
            root.right=new TreeNode(nums[hi]); 
            return root;
        }

        int mid=(lo+hi)/2;
        TreeNode root=new TreeNode(nums[mid]);
        root.left=sortedArrayToBST(nums, lo, mid-1);
        root.right=sortedArrayToBST(nums, mid+1, hi);
        return root;
    }
    
    
    
    
    
}
