package com.alg.weiwang.algorithoms.hash;

/**
 * Created by Administrator on 2017/6/22.
 */
import com.alg.weiwang.algorithoms.utils.Printer;

import org.junit.Test;

import java.util.HashSet;
import java.util.Iterator;

public class UnionIntersect {

    @Test
    public void test(){
        int[] arr1=new int[]{2,3,4,5,6,7};
        int[] arr2=new int[]{-1,1,2,3};
        System.out.println(Printer.printIntArr(union(arr1,arr2)));
        System.out.println(Printer.printIntArr(intersect(arr1,arr2)));
    }

    /**
     *
     *
     Input:
     List1: 10->15->4->20
     lsit2:  8->4->2->10

     Output:
     Intersection List: 4->10
     Union List: 2->8->20->4->15->10

     */
    int[] union(int[] arr1,int[] arr2){
        HashSet<Integer> set=new HashSet();
        for (int temp:arr1){
            set.add(temp);
        }
        for (int temp:arr2){
            set.add(temp);
        }
        int[] ret=new int[set.size()];
        Iterator<Integer> iter=set.iterator();
        int index=0;
        while(iter.hasNext()){
            ret[index]=iter.next();
            index +=1;
        }
        return ret;
    }

    int[] intersect(int[] arr1,int[] arr2){
        HashSet<Integer> set=new HashSet();
        for (int temp:arr1){
            set.add(temp);
        }

        int index=0;
        for (int temp:arr2){
            if (set.contains(temp)){
                index+=1;
            }
        }
        int[] ret=new int[index];

        index=0;
        for (int temp:arr2){
            if (set.contains(temp)){
                ret[index]=temp;
                index+=1;
            }
        }
        return ret;

    }


        
}
