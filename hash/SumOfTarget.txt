Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.



-----------------------------------------------------------------
Given nums = [2, 7, 11, 15], target = 9,
return [0, 1].
--------------! the tricky part ...  ----------------------------
Given nums = [3,3], target = 6,
return [0, 1].
-----------------------------------------------------------------

/**
*
use  HashMap<Integer,ArrayList<Integer>>  to store Integer and indexes  (in the ArrayList)

**/


public class Solution {
    

    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer,ArrayList<Integer>> map=new HashMap();
        for (int i=0;i<nums.length;i++){
            if (map.containsKey(nums[i])){
                ArrayList<Integer> positions=map.get(nums[i]);
                positions.add(i);
                map.put(nums[i],positions);
            } else {
                ArrayList<Integer> positions=new ArrayList();
                positions.add(i);
                map.put(nums[i],positions);
            }
        }
        
        for (int i=0;i<nums.length;i++){
            int compliment=target-nums[i];
            if ( map.containsKey(compliment) ){
                ArrayList<Integer> positions=map.get(compliment);
                if (compliment!=nums[i]){     //  2 integers are different  
                    int[] ret=new int[2];
                    ret[0]=i;
                    ret[1]=positions.get(0);
                    return ret;
                } else {                     //  2 integers are the same, check the index list...
                    if (positions.size()<2){
                        continue;
                    } else {
                        int[] ret=new int[2];
                        ret[0]=positions.get(0);
                        ret[1]=positions.get(1);
                        return ret;
                    }
                }
            }
        }
        return null;
    }
}




/**

a better solution :   use   Map<Integer, Integer>     no need to put every thing in the map ...  check if compliment is in the map, if not put it in the map,  this way no need to treat the (  [3,3]  target 6 )  case as a special case !!!!!!!!!!

*/

public int[] twoSum(int[] numbers, int target) {
    int[] result = new int[2];
    Map<Integer, Integer> map = new HashMap<Integer, Integer>();
    for (int i = 0; i < numbers.length; i++) {
        if (map.containsKey(target - numbers[i])) {
            result[1] = i + 1;
            result[0] = map.get(target - numbers[i]);
            return result;
        }
        map.put(numbers[i], i + 1);
    }
    return result;
}
