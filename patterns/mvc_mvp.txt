--------------------------------------------------------

https://academy.realm.io/posts/eric-maxwell-mvc-mvp-and-mvvm-on-android/

-->"classsic"   MVC  （ activity is both view/controller ）
View        --> XML   
Controller  --> Activity
Model       --> Business logic 


-->MVP
presenter   --> MVP purists would argue that the presenter should never have any references to any Android APIs or code.


We can easily unit test the presenter logic because it’s not tied to any Android specific views 






--------------------------------------------------------
http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html
 --->  MVC:
        视图（View）：用户界面。
        控制器（Controller）：业务逻辑
        模型（Model）：数据保存

classic behaviour:  所有通信都是单向的。
        View 传送指令到 Controller
        Controller 完成业务逻辑后，要求 Model 改变状态
        Model 将新的数据发送到 View，用户得到反馈

实际项目往往采用更灵活的方式:
1. 用户可以向 View 发送指令，再由 View 直接要求 Model 改变状态。
2. 用户也可以直接向 Controller 发送指令，再由 Controller 发送给 View。


 --->  MVP: 

MP双向通信（都持有对方引用），PV双向通信

1. 各部分之间的通信，都是双向的。
2. View 与 Model 不发生联系，都通过 Presenter 传递。
3. View 非常薄，不部署任何业务逻辑，称为"被动视图"（Passive View），即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里。


--------------------------------------------------------

http://www.jianshu.com/p/3010760035e0

MVP模式的一些弊端：

    Presenter（以下简称P）层与View（以下简称V）层是通过接口进行交互的，接口粒度不好控制。粒度太小，就会存在大量接口的情况，使代码太过碎版化；粒度太大，解耦效果不好。同时对于UI的输入和数据的变化，需要手动调用V层或者P层相关的接口，相对来说缺乏自动性、监听性。如果数据的变化能自动响应到UI、UI的输入能自动更新到数据，那该多好！
    MVP是以UI为驱动的模型，更新UI都需要保证能获取到控件的引用，同时更新UI的时候要考虑当前是否是UI线程，也要考虑Activity的生命周期（是否已经销毁等）。
    MVP是以UI和事件为驱动的传统模型，数据都是被动地通过UI控件做展示，但是由于数据的时变性，我们更希望数据能转被动为主动，希望数据能更有活性，由数据来驱动UI。
    V层与P层还是有一定的耦合度。一旦V层某个UI元素更改，那么对应的接口就必须得改，数据如何映射到UI上、事件监听接口这些都需要转变，牵一发而动全身。如果这一层也能解耦就更好了。
    复杂的业务同时也可能会导致P层太大，代码臃肿的问题依然不能解决。


--------------------------------------------------------

http://www.singhajit.com/mvp-in-android/

View     --> java interface
activity --> implements the View interface
presenter--> plain java class
model    --> plain java class


