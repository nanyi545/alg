/**

You may imagine that num[-1] = num[n] = -∞.

For example, in array [1, 2, 3, 1], 3 is a peak element and your function should return the index number 2.

!!! Your solution should be in logarithmic complexity.

solution: divider and conquer 

**/

public class Solution {
    
    
    public int findPeakElement(int[] nums) {
        
        if(nums.length==1) return 0;
        if(nums[0]>nums[1]) return 0;
        if(nums[nums.length-1]>nums[nums.length-2]) return nums.length-1;
        
        return findP(nums,0,nums.length-1);
        
        
    }
    
    
    public int findP(int[] nums, int lo, int hi){
        int length=hi-lo+1;
        if( length>=3 &&  length <=5 ) {
            for (int i=lo+1;i<=hi-1;i++){
                if(nums[i]>nums[i-1] && nums[i]>nums[i+1]) {
                    return i;
                }
            }
            return -1;
        }  else {
            
            int l1=length/2+length%2+lo;
            int l2=l1-1;

            int ret1=findP (nums,lo,l1);
            if (ret1>0) {
                return ret1;
            }  else {
                int ret2=findP(nums,l2,hi);
                return ret2;
            }
            
            
        }
        
        
        
    }
    
    
    
    
    
}
